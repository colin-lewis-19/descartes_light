/*
 * Software License Agreement (Apache License)
 *
 * Copyright (c) 2021, Southwest Research Institute
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef DESCARTES_LIGHT_DFS_ALL_SOLVER_H
#define DESCARTES_LIGHT_DFS_ALL_SOLVER_H

#include <descartes_light/solvers/bgl/bgl_solver.h>

namespace descartes_light
{
/**
 * @brief
 *
 */
template <typename FloatType>
class DFSAddAllSolver : public BGLSolverBaseSVDE<FloatType>
{
public:
  using BGLSolverBaseSVDE<FloatType>::BGLSolverBaseSVDE;

  SearchResult<FloatType> search() override;

private:
  /**
   * @brief Reconstructs a path through the graph from the source to the target vertex using the predecessor map
   */
  std::vector<VertexDesc<FloatType>> reconstructPath(const VertexDesc<FloatType>& source,
                                                     const VertexDesc<FloatType>& target) const;

  /** @brief Predecessor map generated by the search */
  std::map<VertexDesc<FloatType>, VertexDesc<FloatType>> predecessor_map_;
};

using DFSAddAllSolverF = DFSAddAllSolver<float>;
using DFSAddAllSolverD = DFSAddAllSolver<double>;

}  // namespace descartes_light

#endif  // DESCARTES_LIGHT_DFS_ALL_SOLVER_H
